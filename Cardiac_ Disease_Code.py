# Anastasios Koumarelis
# Hellenic Mediterranean University
# Advanced Topics In Artificial Intelligence 2020-2021
# Heart Disease Risk Prediction

#Attention: The above application was created as part of a course for practicing programming languages. 
#It is not used for medical purposes as there is a high probability of invalid results and the only purpose of its creation is to practice programming.

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# Import librarys
from PyQt5 import QtCore, QtGui, QtWidgets
from csv import reader
from problog.program import PrologString
from problog import get_evaluatable
from problog.logic import Term
from problog.learning import lfi

import sys

# Ui framework PyQt5
class Ui_Dialog(object):
    def setupUi(self, Dialog):

        # Variables for inputs values check
        global ageUser, genderUser, cpUser, trestbpsUser, cholUser, fbsUser, restecgUser, thalachUser, exangUser, oldpeakUser, slopeUser, caUser, thalUser

        #Main frame with the fields and buttons
        Dialog.setObjectName("Dialog")
        Dialog.resize(1202, 704)
        Dialog.setMinimumSize(QtCore.QSize(8, 6))
        Dialog.setSizeIncrement(QtCore.QSize(2, 2))
        Dialog.setStyleSheet("background-color: rgb(247, 251, 255);")

        #Submit button
        self.pushButton = QtWidgets.QPushButton(Dialog)
        # Submit button position
        self.pushButton.setGeometry(QtCore.QRect(500, 610, 161, 51))
        # Submit button style
        self.pushButton.setStyleSheet("color: white;\n"
                                      "background-color: rgb(58, 110, 255);\n"
                                      "border-style: outset;\n"
                                      "border-width: 2px;\n"
                                      "border-radius: 10px;\n"
                                      "border-color: black;\n"
                                      "font: bold 14px;\n"
                                      "padding : 6px;\n"
                                      "min-width: 10px;")
        self.pushButton.setObjectName("pushButton")

        # Age input text area
        self.lineEdit = QtWidgets.QLineEdit(Dialog)
        self.lineEdit.setGeometry(QtCore.QRect(280, 180, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.lineEdit.setFont(font)

        # Age input text area style
        self.lineEdit.setStyleSheet("border-style: outset;\n"
                                    "border-width: 2px;\n"
                                    "border-radius: 10px;\n"
                                    "border-color: black;\n"
                                    "font: bold 14px;\n"
                                    "padding : 6px;\n"
                                    "min-width: 10px;")
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")

        # Exit button
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(1050, 650, 141, 41))

        # Exit button style
        self.pushButton_2.setStyleSheet("background-color: rgb(255, 0, 0);\n"
                                        "color: white;\n"
                                        "border-style: outset;\n"
                                        "border-width: 2px;\n"
                                        "border-radius: 10px;\n"
                                        "border-color: black;\n"
                                        "font: bold 14px;\n"
                                        "padding : 6px;\n"
                                        "min-width: 10px;")
        self.pushButton_2.setObjectName("pushButton_2")

        # Gender textarea input
        self.lineEdit_3 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_3.setGeometry(QtCore.QRect(330, 230, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.lineEdit_3.setFont(font)

        # Gender textarea input style
        self.lineEdit_3.setStyleSheet("border-style: outset;\n"
                                      "border-width: 2px;\n"
                                      "border-radius: 10px;\n"
                                      "border-color: black;\n"
                                      "font: bold 14px;\n"
                                      "padding : 6px;\n"
                                      "min-width: 10px;")
        self.lineEdit_3.setText("")
        self.lineEdit_3.setObjectName("lineEdit_3")

        # Chaist pain textarea input
        self.lineEdit_4 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_4.setGeometry(QtCore.QRect(330, 280, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.lineEdit_4.setFont(font)

        # Chaist pain textarea input style
        self.lineEdit_4.setStyleSheet("border-style: outset;\n"
                                      "border-width: 2px;\n"
                                      "border-radius: 10px;\n"
                                      "border-color: black;\n"
                                      "font: bold 14px;\n"
                                      "padding : 6px;\n"
                                      "min-width: 10px;")
        self.lineEdit_4.setText("")
        self.lineEdit_4.setObjectName("lineEdit_4")

        # Cholestoral textarea input
        self.lineEdit_5 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_5.setGeometry(QtCore.QRect(370, 380, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.lineEdit_5.setFont(font)

        # Cholestoral textarea input style
        self.lineEdit_5.setStyleSheet("border-style: outset;\n"
                                      "border-width: 2px;\n"
                                      "border-radius: 10px;\n"
                                      "border-color: black;\n"
                                      "font: bold 14px;\n"
                                      "padding : 6px;\n"
                                      "min-width: 10px;")
        self.lineEdit_5.setText("")
        self.lineEdit_5.setObjectName("lineEdit_5")

        # Resting blood textarea input
        self.lineEdit_6 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_6.setGeometry(QtCore.QRect(330, 330, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.lineEdit_6.setFont(font)

        # Resting blood textarea input style
        self.lineEdit_6.setStyleSheet("border-style: outset;\n"
                                      "border-width: 2px;\n"
                                      "border-radius: 10px;\n"
                                      "border-color: black;\n"
                                      "font: bold 14px;\n"
                                      "padding : 6px;\n"
                                      "min-width: 10px;")
        self.lineEdit_6.setText("")
        self.lineEdit_6.setObjectName("lineEdit_6")

        # Resting ECG textarea input
        self.lineEdit_7 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_7.setGeometry(QtCore.QRect(940, 380, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.lineEdit_7.setFont(font)

        # Resting ECG textarea input style
        self.lineEdit_7.setStyleSheet("border-style: outset;\n"
                                      "border-width: 2px;\n"
                                      "border-radius: 10px;\n"
                                      "border-color: black;\n"
                                      "font: bold 14px;\n"
                                      "padding : 6px;\n"
                                      "min-width: 10px;")
        self.lineEdit_7.setText("")
        self.lineEdit_7.setObjectName("lineEdit_7")

        # Blood sugar textarea input
        self.lineEdit_13 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_13.setGeometry(QtCore.QRect(1020, 180, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.lineEdit_13.setFont(font)

        # Blood sugar textarea input style
        self.lineEdit_13.setStyleSheet("border-style: outset;\n"
                                       "border-width: 2px;\n"
                                       "border-radius: 10px;\n"
                                       "border-color: black;\n"
                                       "font: bold 14px;\n"
                                       "padding : 6px;\n"
                                       "min-width: 10px;")
        self.lineEdit_13.setText("")
        self.lineEdit_13.setObjectName("lineEdit_13")

        # Exercise textarea input
        self.lineEdit_8 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_8.setGeometry(QtCore.QRect(940, 230, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.lineEdit_8.setFont(font)

        # Exercise textarea input style
        self.lineEdit_8.setStyleSheet("border-style: outset;\n"
                                      "border-width: 2px;\n"
                                      "border-radius: 10px;\n"
                                      "border-color: black;\n"
                                      "font: bold 14px;\n"
                                      "padding : 6px;\n"
                                      "min-width: 10px;")
        self.lineEdit_8.setText("")
        self.lineEdit_8.setObjectName("lineEdit_8")

        # Max ECG textarea input
        self.lineEdit_2 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_2.setGeometry(QtCore.QRect(390, 430, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.lineEdit_2.setFont(font)

        # Max ECG textarea input style
        self.lineEdit_2.setStyleSheet("border-style: outset;\n"
                                      "border-width: 2px;\n"
                                      "border-radius: 10px;\n"
                                      "border-color: black;\n"
                                      "font: bold 14px;\n"
                                      "padding : 6px;\n"
                                      "min-width: 10px;")
        self.lineEdit_2.setText("")
        self.lineEdit_2.setObjectName("lineEdit_2")

        # Thalassemia textarea input
        self.lineEdit_9 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_9.setGeometry(QtCore.QRect(490, 480, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.lineEdit_9.setFont(font)

        # Thalassemia textarea input style
        self.lineEdit_9.setStyleSheet("border-style: outset;\n"
                                      "border-width: 2px;\n"
                                      "border-radius: 10px;\n"
                                      "border-color: black;\n"
                                      "font: bold 14px;\n"
                                      "padding : 6px;\n"
                                      "min-width: 10px;")
        self.lineEdit_9.setText("")
        self.lineEdit_9.setObjectName("lineEdit_9")

        # Vessels textarea input
        self.lineEdit_10 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_10.setGeometry(QtCore.QRect(1040, 430, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.lineEdit_10.setFont(font)

        # Vessels textarea input style
        self.lineEdit_10.setStyleSheet("border-style: outset;\n"
                                       "border-width: 2px;\n"
                                       "border-radius: 10px;\n"
                                       "border-color: black;\n"
                                       "font: bold 14px;\n"
                                       "padding : 6px;\n"
                                       "min-width: 10px;")
        self.lineEdit_10.setText("")
        self.lineEdit_10.setObjectName("lineEdit_10")

        # Slope textarea input
        self.lineEdit_11 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_11.setGeometry(QtCore.QRect(960, 330, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.lineEdit_11.setFont(font)

        # Slope textarea input style
        self.lineEdit_11.setStyleSheet("border-style: outset;\n"
                                       "border-width: 2px;\n"
                                       "border-radius: 10px;\n"
                                       "border-color: black;\n"
                                       "font: bold 14px;\n"
                                       "padding : 6px;\n"
                                       "min-width: 10px;")
        self.lineEdit_11.setText("")
        self.lineEdit_11.setObjectName("lineEdit_11")

        # ST depression textarea input
        self.lineEdit_12 = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_12.setGeometry(QtCore.QRect(1060, 280, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(-1)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)

        # ST depression textarea input style
        self.lineEdit_12.setFont(font)
        self.lineEdit_12.setStyleSheet("border-style: outset;\n"
                                       "border-width: 2px;\n"
                                       "border-radius: 10px;\n"
                                       "border-color: black;\n"
                                       "font: bold 14px;\n"
                                       "padding : 6px;\n"
                                       "min-width: 10px;")
        self.lineEdit_12.setText("")
        self.lineEdit_12.setObjectName("lineEdit_12")

        # Label of the frame
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(0, -10, 1211, 121))
        font = QtGui.QFont()
        font.setPointSize(28)

        # Label of the frame style
        self.label.setFont(font)
        self.label.setAutoFillBackground(False)
        self.label.setStyleSheet("background-color: rgb(197, 228, 255);")
        self.label.setObjectName("label")

        # Heart disease risk prediction label
        self.label_16 = QtWidgets.QLabel(Dialog)
        self.label_16.setGeometry(QtCore.QRect(450, 80, 311, 31))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_16.setFont(font)
        self.label_16.setStyleSheet("background-color: rgb(197, 228, 255);")
        self.label_16.setObjectName("label_16")

        # Age label style
        self.label_17 = QtWidgets.QLabel(Dialog)
        self.label_17.setGeometry(QtCore.QRect(20, 180, 251, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_17.setFont(font)
        self.label_17.setObjectName("label_17")

        # Gender label
        self.label_19 = QtWidgets.QLabel(Dialog)
        self.label_19.setGeometry(QtCore.QRect(20, 230, 301, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)

        # Gender label style
        self.label_19.setFont(font)
        self.label_19.setObjectName("label_19")

        # Chaist pain label
        self.label_20 = QtWidgets.QLabel(Dialog)
        self.label_20.setGeometry(QtCore.QRect(20, 280, 301, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)

        # Chaist pain label style
        self.label_20.setFont(font)
        self.label_20.setObjectName("label_20")

        # Blood sugar label
        self.label_21 = QtWidgets.QLabel(Dialog)
        self.label_21.setGeometry(QtCore.QRect(520, 180, 491, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)

        # Blood sugar label style
        self.label_21.setFont(font)
        self.label_21.setObjectName("label_21")

        # Pressure  label
        self.label_22 = QtWidgets.QLabel(Dialog)
        self.label_22.setGeometry(QtCore.QRect(20, 330, 301, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)

        # Pressure  label style
        self.label_22.setFont(font)
        self.label_22.setObjectName("label_22")

        # Cholestoral  label
        self.label_23 = QtWidgets.QLabel(Dialog)
        self.label_23.setGeometry(QtCore.QRect(20, 380, 341, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)

        # Cholestoral  label style
        self.label_23.setFont(font)
        self.label_23.setObjectName("label_23")

        # Exercise  label
        self.label_24 = QtWidgets.QLabel(Dialog)
        self.label_24.setGeometry(QtCore.QRect(520, 230, 411, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)

        # Exercise  label style
        self.label_24.setFont(font)
        self.label_24.setObjectName("label_24")

        # Resting ECG label
        self.label_25 = QtWidgets.QLabel(Dialog)
        self.label_25.setGeometry(QtCore.QRect(520, 380, 411, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)

        # Resting ECG label style
        self.label_25.setFont(font)
        self.label_25.setObjectName("label_25")

        # Max ECG label
        self.label_26 = QtWidgets.QLabel(Dialog)
        self.label_26.setGeometry(QtCore.QRect(20, 430, 361, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)

        # Max ECG label style
        self.label_26.setFont(font)
        self.label_26.setObjectName("label_26")

        # Vessels label
        self.label_27 = QtWidgets.QLabel(Dialog)
        self.label_27.setGeometry(QtCore.QRect(530, 430, 501, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)

        # Vessels label style
        self.label_27.setFont(font)
        self.label_27.setObjectName("label_27")

        # ST depression label
        self.label_28 = QtWidgets.QLabel(Dialog)
        self.label_28.setGeometry(QtCore.QRect(520, 280, 531, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)

        # ST depression label style
        self.label_28.setFont(font)
        self.label_28.setObjectName("label_28")

        # Slope peak label
        self.label_29 = QtWidgets.QLabel(Dialog)
        self.label_29.setGeometry(QtCore.QRect(520, 330, 431, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)

        # Slope peak label style
        self.label_29.setFont(font)
        self.label_29.setObjectName("label_29")

        # Thalassemia label
        self.label_30 = QtWidgets.QLabel(Dialog)
        self.label_30.setGeometry(QtCore.QRect(20, 480, 461, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)

        # Thalassemia label style
        self.label_30.setFont(font)
        self.label_30.setObjectName("label_30")

        # Result label
        self.label_35 = QtWidgets.QLabel(Dialog)
        self.label_35.setGeometry(QtCore.QRect(0, 550, 1211, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)

        # Result label style
        self.label_35.setFont(font)
        self.label_35.setStyleSheet("background-color: rgb(197, 228, 255);")
        self.label_35.setObjectName("label_35")

        # Result output label
        self.label_36 = QtWidgets.QLabel(Dialog)
        self.label_36.setGeometry(QtCore.QRect(570, 550, 191, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_36.setFont(font)
        self.label_36.setStyleSheet("background-color: rgb(197, 228, 255);")
        self.label_36.setObjectName("label_36")

        # User input label
        self.label_18 = QtWidgets.QLabel(Dialog)
        self.label_18.setGeometry(QtCore.QRect(20, 140, 251, 31))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)

        # User input label style
        self.label_18.setFont(font)
        self.label_18.setObjectName("label_18")

        # Course information label
        self.label_31 = QtWidgets.QLabel(Dialog)
        self.label_31.setGeometry(QtCore.QRect(10, 680, 441, 21))
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(11)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_31.setFont(font)
        self.label_31.setObjectName("label_31")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

        # Close button for the frame
        # Once the button is clicked then the frame will close
        self.pushButton_2.clicked.connect(self.close)

        # Once the button is clicked then clickMethod is called
        self.pushButton.clicked.connect(self.clickMethod)

    #Set texts for all the labels on the frame
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        self.pushButton.setText(_translate("Dialog", "SUBMIT"))
        self.pushButton_2.setText(_translate("Dialog", "EXIT"))
        self.label.setText(_translate("Dialog", "                       Application"))
        self.label_16.setText(_translate("Dialog", "Heart Disease Risk Prediction"))
        self.label_17.setText(_translate("Dialog", "Age: age in years (1-100):"))
        self.label_19.setText(_translate("Dialog", "Gender (1 = male; 0 = female):"))
        self.label_20.setText(_translate("Dialog", "Chest pain type (4 values: 0-3):"))
        self.label_21.setText(_translate("Dialog", "Fasting blood sugar 120 mg/dl (1 = true; 0 = false):"))
        self.label_22.setText(_translate("Dialog", "Resting blood pressure (1-200):"))
        self.label_23.setText(_translate("Dialog", "Serum cholestoral in mg/dl (1-400):"))
        self.label_24.setText(_translate("Dialog", "Exercise induced angina (1 = yes; 0 = no):"))
        self.label_25.setText(_translate("Dialog", "Resting electrocardiographic results (0,1,2):"))
        self.label_26.setText(_translate("Dialog", "Maximum heart rate achieved (1-300):"))
        self.label_27.setText(_translate("Dialog", "Number of major vessels (0-3) colored by flourosopy:"))
        self.label_28.setText(_translate("Dialog", "ST depression induced by exercise relative to rest (0-3):  "))
        self.label_29.setText(_translate("Dialog", "Slope of the peak exercise ST segment (0-2):"))
        self.label_30.setText(_translate("Dialog", "Thalassemia (1= normal; 3 = reversable defect):"))
        self.label_35.setText(_translate("Dialog", "                                                                                 Result:"))
        self.label_36.setText(_translate("Dialog", "_"))
        self.label_18.setText(_translate("Dialog", "USER INPUT:"))
        self.label_31.setText(_translate("Dialog", "Advanced Topics In Artificial Intelligence 2020-2021"))

    # This function is call when the user press the submit button
    # I check every user input and i create the evidences
    def clickMethod(self):
        global trained_model
        user_evidence_infected = []
        patient_data = ""

        # Age input
        # If the textfield is empty then the evidence is false
        if self.lineEdit.text() == '':
            user_evidence_infected.append((Term("young"), False))
            patient_data = patient_data + "evidence(young,false)."
        else:
            ageUser = int(self.lineEdit.text())
            # If the age < 50 then the evidence is true
            if ageUser < 50:
                user_evidence_infected.append((Term("young"), True))
                patient_data = patient_data + "evidence(young,true)."
                # If the age >= 50 then the evidence is faLse
            elif ageUser >= 50:
                user_evidence_infected.append((Term("young"), False))
                patient_data = patient_data + "evidence(young,false)."

        # Gender input
        # If the textfield is empty then the evidence is false
        if self.lineEdit_3.text() == '':
            user_evidence_infected.append((Term("male"), False))
            patient_data = patient_data + "\nevidence(male,false)."
        else:
            genderUser = int(self.lineEdit_3.text())
            # If the gender = 1 then the evidence is true that means men
            if genderUser == 1:
                user_evidence_infected.append((Term("male"), True))
                patient_data = patient_data + "\nevidence(male,true)."
            else:
                # If the gender != 1 then the evidence is false that means women
                user_evidence_infected.append((Term("male"), False))
                patient_data = patient_data + "\nevidence(male,false)."

        # Chest Pain input
        # If the textfield is empty then the evidence is false
        if self.lineEdit_4.text() == '':
            cpUser = 0
            user_evidence_infected.append((Term("chestmidPain"), False))
            patient_data = patient_data + "\nevidence(chestmidPain,false)."
        else:
            cpUser = int(self.lineEdit_4.text())
            # If the chest pain <= 1 then the evidence is true
            if cpUser <= 1:
                user_evidence_infected.append((Term("chestmidPain"), False))
                patient_data = patient_data + "\nevidence(chestmidPain,true)."
            # If the chest pain >= 2 then the evidence is false
            elif cpUser >= 2:
                user_evidence_infected.append((Term("chestmidPain"), True))
                patient_data = patient_data + "\nevidence(chestmidPain,false)."

        # Pressure input
        if self.lineEdit_6.text() == '':
            user_evidence_infected.append((Term("normalPressure"), False))
            patient_data = patient_data + "\nevidence(normalPressure,false)."
        else:
            trestbpsUser = int(self.lineEdit_6.text())
            if trestbpsUser < 120:
                user_evidence_infected.append((Term("normalPressure"), True))
                patient_data = patient_data + "\nevidence(normalPressure,true)."
            elif trestbpsUser >= 120:
                user_evidence_infected.append((Term("normalPressure"), False))
                patient_data = patient_data + "\nevidence(normalPressure,false)."

        # Cholestoral input
        if self.lineEdit_5.text() == '':
            user_evidence_infected.append((Term("normalCholesterol"), False))
            patient_data = patient_data + "\nevidence(normalCholesterol,false)."
        else:
            cholUser = int(self.lineEdit_5.text())
            if cholUser < 200:
                user_evidence_infected.append((Term("normalCholesterol"), True))
                patient_data = patient_data + "\nevidence(normalCholesterol,true)."
            elif cholUser >= 200:
                user_evidence_infected.append((Term("normalCholesterol"), False))
                patient_data = patient_data + "\nevidence(normalCholesterol,false)."

        # Blood Sugar input
        if self.lineEdit_7.text() == '':
            user_evidence_infected.append((Term("trueFbs"), False))
            patient_data = patient_data + "\nevidence(trueFbs,false)."
        else:
            fbsUser = int(self.lineEdit_7.text())
            if fbsUser == 1:
                user_evidence_infected.append((Term("trueFbs"), True))
                patient_data = patient_data + "\nevidence(trueFbs,true)."
            else:
                user_evidence_infected.append((Term("trueFbs"), False))
                patient_data = patient_data + "\nevidence(trueFbs,false)."

        # Rest Ecg input
        if self.lineEdit_13.text() == '':
            user_evidence_infected.append((Term("normalEcg"), False))
            patient_data = patient_data + "\nevidence(normalEcg,false)."
        else:
            restecgUser = int(self.lineEdit_13.text())
            if restecgUser <= 1:
                user_evidence_infected.append((Term("normalEcg"), True))
                patient_data = patient_data + "\nevidence(normalEcg,true)."
            elif restecgUser >= 2:
                user_evidence_infected.append((Term("normalEcg"), False))
                patient_data = patient_data + "\nevidence(normalEcg,false)."

        # Max Heart input
        if self.lineEdit_2.text() == '':
            user_evidence_infected.append((Term("normalMaxHeart"), False))
            patient_data = patient_data + "\nevidence(normalMaxHeart,false)."
        else:
            thalachUser = int(self.lineEdit_2.text())
            if thalachUser < 100:
                user_evidence_infected.append((Term("normalMaxHeart"), True))
                patient_data = patient_data + "\nevidence(normalMaxHeart,true)."
            elif thalachUser >= 100:
                user_evidence_infected.append((Term("normalMaxHeart"), False))
                patient_data = patient_data + "\nevidence(normalMaxHeart,false)."

            # Exercise input
            if self.lineEdit_8.text() == '':
                user_evidence_infected.append((Term("trueExang"), False))
                patient_data = patient_data + "\nevidence(trueExang,false)."
            else:
                exangUser = int(self.lineEdit_8.text())
            if exangUser == 0:
                user_evidence_infected.append((Term("trueExang"), True))
                patient_data = patient_data + "\nevidence(trueExang,true)."
            elif exangUser == 1:
                user_evidence_infected.append((Term("trueExang"), False))
                patient_data = patient_data + "\nevidence(trueExang,false)."

            # Oldpeak input
            if self.lineEdit_12.text() == '':
                user_evidence_infected.append((Term("normalPeak"), False))
                patient_data = patient_data + "\nevidence(normalPeak,false)."
            else:
                oldpeakUser = int(self.lineEdit_12.text())
            if oldpeakUser <= 1:
                user_evidence_infected.append((Term("normalPeak"), True))
                patient_data = patient_data + "\nevidence(normalPeak,true)."
            elif oldpeakUser > 1:
                user_evidence_infected.append((Term("normalPeak"), False))
                patient_data = patient_data + "\nevidence(normalPeak,false)."

            # Slope input
            if self.lineEdit_11.text() == '':
                user_evidence_infected.append((Term("normalSlope"), False))
                patient_data = patient_data + "\nevidence(normalSlope,false)."
            else:
                slopeUser = int(self.lineEdit_11.text())
            if slopeUser <= 1:
                user_evidence_infected.append((Term("normalSlope"), True))
                patient_data = patient_data + "\nevidence(normalSlope,true)."
            elif slopeUser > 1:
                user_evidence_infected.append((Term("normalSlope"), False))
                patient_data = patient_data + "\nevidence(normalSlope,false)."

            # Vessels input
            if self.lineEdit_10.text() == '':
                user_evidence_infected.append((Term("twoVessel"), False))
                patient_data = patient_data + "\nevidence(twoVessel,false)."
            else:
                caUser = int(self.lineEdit_10.text())
            if caUser <= 1:
                user_evidence_infected.append((Term("twoVessel"), True))
                patient_data = patient_data + "\nevidence(twoVessel,true)."
            elif caUser >= 2:
                user_evidence_infected.append((Term("twoVessel"), False))
                patient_data = patient_data + "\nevidence(twoVessel,false)."

            # Max ECG input
            if self.lineEdit_9.text() == '':
                user_evidence_infected.append((Term("normalThal"), False))
                patient_data = patient_data + "\nevidence(normalThal,false)."
            else:
                thalUser = int(self.lineEdit_9.text())
            if thalUser < 2:
                user_evidence_infected.append((Term("normalThal"), True))
                patient_data = patient_data + "\nevidence(normalThal,true)."
            elif thalUser >= 2:
                user_evidence_infected.append((Term("normalThal"), False))
                patient_data = patient_data + "\nevidence(normalThal,false)."

            # Final query to find the risk prediction
            patient_data = patient_data + "\nquery(sick)."

            # User model is the evidences from the user inputs above
            patient_data = trained_model + patient_data
            #print(patient_data)

            # Evaluete the new model with the evidences with Problog
            p_usermodel = PrologString(patient_data)
            result = get_evaluatable().create_from(p_usermodel, propagate_evidence=True).evaluate()

            #Debugg for printing the result in command line
            cnt = 0
            for query, value in result.items():
                if cnt == 0:
                    prob_message = "Probability to be Infected: " + format(value, ".4f") + "\n"
                    cnt = cnt + 1
                else:
                    prob_message = prob_message + "Probability to be Recovered: " + format(value, ".4f") + "\n"
                    cnt = 0
            print(result)
            self.label_36.setText(format(value, ".4f"))
            #print(user_evidence_infected)
            #print(p_usermodel)


def readDatasetFile():
    global set_sick
    global evidence
    global trained_model
    # CSV READ
    with open('heart.csv', 'r') as read_obj:
        csv_reader = reader(read_obj)
        header = next(csv_reader)
        # Check file as empty
        if header != None:
            # Iterate over each row after the header in the csv
            for row in csv_reader:
                evidence_list = []

                # print(row)
                # row variable is a list that represents a row in csv
                if int(row[12]) == 1:
                    final_model = "t(_)::healthy:-"
                else:
                    final_model = "t(_)::sick:-"

                # Read from csv values one by one

                # Age column
                # If column is empty then age is 0
                if row[0] == '':
                    ageUser = 0
                else:
                    ageUser = int(row[0])
                    # If column < 50 then in model we have young (true)
                    if ageUser < 50:
                        final_model = final_model + "young,"
                        evidence_list.append((Term("young"), True, None))
                    # If column >= 50 then in model we have \+young (false)
                    elif ageUser >= 50:
                        final_model = final_model + "\+young,"
                        evidence_list.append((Term("young"), False, None))

                # Gender column
                # If column is empty then age is 0
                if row[1] == '':
                    genderUser = 0
                else:
                    genderUser = int(row[1])
                    # If column == 1 then in model we have male (true)
                    if genderUser == 1:
                        final_model = final_model + "male,"
                        evidence_list.append((Term("male"), True, None))
                    else:
                        # If column 1= 1 then in model we have \+male (false)
                        final_model = final_model + "\+male,"
                        evidence_list.append((Term("male"), False, None))

                # Chest Pain column
                # If column is empty then age is 0
                if row[2] == '':
                    cpUser = 0
                else:
                    cpUser = int(row[2])
                    # If column <= 1 then in model we have chestmidPain (true)
                    if cpUser <= 1:
                        final_model = final_model + "chestmidPain,"
                        evidence_list.append((Term("chestmidPain"), False, None))
                    # If column >= 2 then in model we have \+chestmidPain (false)
                    elif cpUser >= 2:
                        final_model = final_model + "\+chestmidPain,"
                        evidence_list.append((Term("chestmidPain"), True, None))

                # Pressure
                if row[3] == '':
                    trestbpsUser = 0
                else:
                    trestbpsUser = int(row[3])
                    if trestbpsUser < 120:
                        final_model = final_model + "normalPressure,"
                        evidence_list.append((Term("normalPressure"), True, None))
                    elif trestbpsUser >= 120:
                        final_model = final_model + "\+normalPressure,"
                        evidence_list.append((Term("normalPressure"), False, None))

                # Cholestoral
                if row[4] == '':
                    cholUser = 0
                else:
                    cholUser = int(row[4])
                    if cholUser < 200:
                        final_model = final_model + "normalCholesterol,"
                        evidence_list.append((Term("normalCholesterol"), True, None))
                    elif cholUser >= 200:
                        final_model = final_model + "\+normalCholesterol,"
                        evidence_list.append((Term("normalCholesterol"), False, None))

                # Blood Sugar
                if row[5] == '':
                    fbsUser = 0
                else:
                    fbsUser = int(row[5])
                    if fbsUser == 1:
                        evidence_list.append((Term("trueFbs"), True, None))
                        final_model = final_model + "trueFbs,"
                    elif fbsUser == 0:
                        evidence_list.append((Term("trueFbs"), False, None))
                        final_model = final_model + "\+trueFbs,"

                # Rest Ecg
                if row[6] == '':
                    restecgUser = 0
                else:
                    restecgUser = int(row[6])
                    if restecgUser <= 1:
                        evidence_list.append((Term("normalEcg"), True, None))
                        final_model = final_model + "normalEcg,"
                    elif restecgUser >= 2:
                        evidence_list.append((Term("normalEcg"), False, None))
                        final_model = final_model + "\+normalEcg,"

                # Max Heart
                if row[7] == '':
                    thalachUser = 0
                else:
                    thalachUser = int(row[7])
                    if thalachUser < 100:
                        evidence_list.append((Term("normalMaxHeart"), True, None))
                        final_model = final_model + "normalMaxHeart,"
                    elif thalachUser >= 100:
                        evidence_list.append((Term("normalMaxHeart"), False, None))
                        final_model = final_model + "\+normalMaxHeart,"

                # Exercise
                if row[8] == '':
                    exangUser = 0
                else:
                    exangUser = int(row[8])
                    if exangUser == 0:
                        evidence_list.append((Term("trueExang"), False, None))
                        final_model = final_model + "\+trueExang,"
                    elif exangUser == 1:
                        evidence_list.append((Term("trueExang"), True, None))
                        final_model = final_model + "trueExang,"

                # Oldpeak
                if row[9] == '':
                    oldpeakUser = 0
                else:
                    oldpeakUser = int(float(row[9]))
                    if oldpeakUser <= 1:
                        evidence_list.append((Term("normalPeak"), True, None))
                        final_model = final_model + "normalPeak,"
                    elif oldpeakUser > 1:
                        evidence_list.append((Term("normalPeak"), False, None))
                        final_model = final_model + "\+normalPeak,"

                # Slope
                if row[10] == '':
                    slopeUser = 0
                else:
                    slopeUser = int(row[10])
                    if slopeUser <= 1:
                        evidence_list.append((Term("normalSlope"), True, None))
                        final_model = final_model + "normalSlope,"
                    elif slopeUser > 1:
                        evidence_list.append((Term("normalSlope"), False, None))
                        final_model = final_model + "\+normalSlope,"

                # Vessels
                if row[11] == '':
                    caUser = 0
                else:
                    caUser = int(row[11])
                    if caUser <= 1:
                        evidence_list.append((Term("twoVessel"), True, None))
                        final_model = final_model + "twoVessel,"
                    elif caUser >= 2:
                        evidence_list.append((Term("twoVessel"), False, None))
                        final_model = final_model + "\+twoVessel,"

                # Thalassemia
                if row[12] == '':
                    thalUser = 0
                else:
                    thalUser = int(row[12])
                    if thalUser < 2:
                        evidence_list.append((Term("normalThal"), True, None))
                        final_model = final_model + "normalThal."
                    elif thalUser >= 2:
                        evidence_list.append((Term("normalThal"), False, None))
                        final_model = final_model + "\+normalThal."

                final_model = final_model.replace(",.", ".")
                set_sick.add(final_model)
                evidence.append(evidence_list)


class MainWindow(QtWidgets.QMainWindow, Ui_Dialog):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent=parent)
        self.setupUi(self)


if __name__ == "__main__":

    # First i create a set and a list to save the csv and input user data
    set_sick = set()
    evidence = list()

    # Function that rteads from csv and creates the training model
    readDatasetFile()

    term_list = list(set_sick)
    term_list.sort()

    # Creating the Learning Model
    model = """"""
    model = model + "t(_)::young.\n"
    model = model + "t(_)::male.\n"
    model = model + "t(_)::chestmidPain.\n"
    model = model + "t(_)::normalPressure.\n"
    model = model + "t(_)::normalCholesterol.\n"
    model = model + "t(_)::trueFbs.\n"
    model = model + "t(_)::normalEcg.\n"
    model = model + "t(_)::normalMaxHeart.\n"
    model = model + "t(_)::trueExang.\n"
    model = model + "t(_)::normalPeak.\n"
    model = model + "t(_)::normalSlope.\n"
    model = model + "t(_)::twoVessel.\n"
    model = model + "t(_)::normalThal.\n"

    for y in range(len(term_list)):
        if y != (len(term_list) - 1):
            model = model + term_list[y] + "\n"
        else:
            model = model + term_list[y]

    #print(model)
    # Evaluete the learning model
    score, weights, atoms, iteration, lfi_problem = lfi.run_lfi(PrologString(model), evidence)
    trained_model = lfi_problem.get_model()
    #print(trained_model)

    app = QtWidgets.QApplication(sys.argv)

    # Run the main window function for UI
    w = MainWindow()
    w.show()
    sys.exit(app.exec_())